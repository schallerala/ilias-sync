<div class="ilc_Paragraph ilc_text_block_Standard ilc_link_ExtLink" rel="noreferrer noopener">Automata on infinite strings (and maybe trees) are studied in this lecture. In the verification of reactive systems, representations of indefinitely long computational sequences are needed. The usual abstraction of "indefinitely long" is "infinitely long", and automata on infinite structures play therefore an important role in verification and in particular verfication algorithms.<br><br>In order not to solve the same problems again and again, a&nbsp;<span class="ilc_text_inline_Emph">theory</span>&nbsp;of automata on infinite structures provides us with the tools to solve frequently arising problems once and for all.<br>&nbsp;<br>This course is run by Ulrich Ultes-Nitsche (lectures) and Christophe Stammet (exercise classes). We will provide you with our course material via this course on Ilias.<br><br><span class="ilc_text_inline_Strong"><a class="ilc_link_IntLink" href="./goto.php?target=file_1909030" target="_top" id="il__obj_1909030_2274315_1">1. Introduction</a> (<a class="ilc_link_IntLink" href="./goto.php?target=file_1917290" target="_top" id="il__obj_1917290_2274315_2">with annotations</a>)</span><br><br>We give a first definition of automata on infinitely long words (aka <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-1-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>&amp;#x03C9;</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-1" style="width: 0.867em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.694em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.904em, 1000.64em, 2.71em, -999.997em); top: -2.532em; left: 0em;"><span class="mrow" id="MathJax-Span-2"><span class="mi" id="MathJax-Span-3" style="font-family: STIXGeneral-Italic;">ω</span></span><span style="display: inline-block; width: 0px; height: 2.537em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.068em; border-left: 0px solid; width: 0px; height: 0.718em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>ω</mi></math></span></span><script type="math/tex" id="MathJax-Element-1">\omega</script>-words) for the so-called <span class="ilc_text_inline_Emph">Büchi</span> <span class="ilc_text_inline_Emph">acceptance conditions</span>. However, before we introduce Büchi automata, we revise general concepts from automata theory on finitely long words.<br><br><span class="ilc_text_inline_Strong"><a class="ilc_link_IntLink" href="./goto.php?target=file_1909029" target="_top" id="il__obj_1909029_2274315_3">2. Determinism and Non-determinism in Büchi Automata</a> (<a class="ilc_link_IntLink" href="./goto.php?target=file_1927006" target="_top" id="il__obj_1927006_2274315_4">with annotations</a>; <a class="ilc_link_IntLink" href="./goto.php?target=file_1927005" target="_top" id="il__obj_1927005_2274315_5">underlying paper</a>)</span><br><br>We have already mentioned that some regular&nbsp;<span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-2-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>&amp;#x03C9;</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-4" style="width: 0.867em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.694em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.904em, 1000.64em, 2.71em, -999.997em); top: -2.532em; left: 0em;"><span class="mrow" id="MathJax-Span-5"><span class="mi" id="MathJax-Span-6" style="font-family: STIXGeneral-Italic;">ω</span></span><span style="display: inline-block; width: 0px; height: 2.537em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.068em; border-left: 0px solid; width: 0px; height: 0.718em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>ω</mi></math></span></span><script type="math/tex" id="MathJax-Element-2">\omega</script>-languages require that a&nbsp;Büchi-automaton recognizing them must be non-deterministic. In this section, we are formalising this observation, using the notion of&nbsp;<span class="ilc_text_inline_Emph">Eilenberg-limit</span>&nbsp;of a regular language. In addition, we look at a result that states that we can somehow still control the amount of non-determinism in Büchi automata: the highest unavoidable degree of non-determinism in Büchi-automata is 2 for all regular&nbsp;<span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-3-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>&amp;#x03C9;</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-7" style="width: 0.867em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.694em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.904em, 1000.64em, 2.71em, -999.997em); top: -2.532em; left: 0em;"><span class="mrow" id="MathJax-Span-8"><span class="mi" id="MathJax-Span-9" style="font-family: STIXGeneral-Italic;">ω</span></span><span style="display: inline-block; width: 0px; height: 2.537em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.068em; border-left: 0px solid; width: 0px; height: 0.718em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>ω</mi></math></span></span><script type="math/tex" id="MathJax-Element-3">\omega</script>-languages.<br><br><span class="ilc_text_inline_Strong"><a class="ilc_link_IntLink" href="./goto.php?target=file_1919880" target="_top" id="il__obj_1919880_2274315_6">3. Greedy Runs</a> (<a class="ilc_link_IntLink" href="./goto.php?target=file_1934885" target="_top" id="il__obj_1934885_2274315_7">with annotations</a>)</span><br>&nbsp;<br>When it comes to introducing the complementation construction for Büchi automata in general, we are aiming at a representation of particulars runs of Büchi automata: the greedy runs.<br><br><span class="ilc_text_inline_Strong"><a class="ilc_link_IntLink" href="./goto.php?target=file_1934049" target="_top" id="il__obj_1934049_2274315_8">4. Closure of Büchi Automata under Boolean Operations</a> (<a class="ilc_link_IntLink" href="./goto.php?target=file_1946768" target="_top" id="il__obj_1946768_2274315_9">with annotations</a>; <a class="ilc_link_IntLink" href="./goto.php?target=file_1946760" target="_top" id="il__obj_1946760_2274315_10">underlying paper</a>)</span><br><br>The so-called&nbsp;<span class="ilc_text_inline_Emph">language inclusion</span>&nbsp;problem for Büchi-automata will turn out to be decidable. To get an algorithm for the language inclusion problem, one exploits the closure of Büchi automata under Boolean operations (to be precise, it's not the automata themselves but the Büchi-accepted languages that are closed under Boolean operations - we still say that the automata are). In this section, we discuss these closure peroperties.<br><br>As before, we compare the case of Büchi automata (we call them BA subsequently) with the case of finite automata on finitely long words (we call them FA subseqently).&nbsp;<br>&nbsp;<br><span class="ilc_text_inline_Strong"><a class="ilc_link_IntLink" href="./goto.php?target=file_1946753" target="_top" id="il__obj_1946753_2274315_11">5. <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-4-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>&amp;#x03C9;</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-10" style="width: 0.853em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.683em; height: 0px; font-size: 126%;"><span style="position: absolute; clip: rect(1.93em, 1000.63em, 2.724em, -999.997em); top: -2.548em; left: 0em;"><span class="mrow" id="MathJax-Span-11"><span class="mi" id="MathJax-Span-12" style="font-family: STIXGeneral-Italic;">ω</span></span><span style="display: inline-block; width: 0px; height: 2.554em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.068em; border-left: 0px solid; width: 0px; height: 0.718em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>ω</mi></math></span></span><script type="math/tex" id="MathJax-Element-4">\omega</script>-regular Expressions</a> (<a class="ilc_link_IntLink" href="./goto.php?target=file_1947742" target="_top" id="il__obj_1947742_2274315_12">with annotations</a>)</span><br>&nbsp;<br>There exists an "algebraic" way to represent the&nbsp;<span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-5-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>&amp;#x03C9;</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-13" style="width: 0.867em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.694em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.904em, 1000.64em, 2.71em, -999.997em); top: -2.532em; left: 0em;"><span class="mrow" id="MathJax-Span-14"><span class="mi" id="MathJax-Span-15" style="font-family: STIXGeneral-Italic;">ω</span></span><span style="display: inline-block; width: 0px; height: 2.537em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.068em; border-left: 0px solid; width: 0px; height: 0.718em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>ω</mi></math></span></span><script type="math/tex" id="MathJax-Element-5">\omega</script>-languages that can be recognized by Büchi-automata:&nbsp;<span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-6-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>&amp;#x03C9;</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-16" style="width: 0.867em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.694em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.904em, 1000.64em, 2.71em, -999.997em); top: -2.532em; left: 0em;"><span class="mrow" id="MathJax-Span-17"><span class="mi" id="MathJax-Span-18" style="font-family: STIXGeneral-Italic;">ω</span></span><span style="display: inline-block; width: 0px; height: 2.537em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.068em; border-left: 0px solid; width: 0px; height: 0.718em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>ω</mi></math></span></span><script type="math/tex" id="MathJax-Element-6">\omega</script>-regular expressions. We are defining&nbsp;<span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-7-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>&amp;#x03C9;</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-19" style="width: 0.867em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.694em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.904em, 1000.64em, 2.71em, -999.997em); top: -2.532em; left: 0em;"><span class="mrow" id="MathJax-Span-20"><span class="mi" id="MathJax-Span-21" style="font-family: STIXGeneral-Italic;">ω</span></span><span style="display: inline-block; width: 0px; height: 2.537em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.068em; border-left: 0px solid; width: 0px; height: 0.718em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>ω</mi></math></span></span><script type="math/tex" id="MathJax-Element-7">\omega</script>-regular expressions in this section and prove their equivalence to Büchi-automata.<br>&nbsp;<br><span class="ilc_text_inline_Strong"><a class="ilc_link_IntLink" href="./goto.php?target=file_1946752" target="_top" id="il__obj_1946752_2274315_13">6. Monadic Second-order Logic</a> (<a class="ilc_link_IntLink" href="./goto.php?target=file_1956902" target="_top" id="il__obj_1956902_2274315_14">with annotations</a>)</span><br><br>Büchi, when inventing his automata, was actually studying logical frameworks. It was in particular the monadic second-order theory of one successor that led to Büchi-automata. We are going to study this logic and its link to automata in this section, knowing already the closure under Boolean operations.<br><br><span class="ilc_text_inline_Strong"><a class="ilc_link_IntLink" href="./goto.php?target=file_1961968" target="_top" id="il__obj_1961968_2274315_15">7. A Bigger S1S<span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-8-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><msub><mi></mi><mrow class=&quot;MJX-TeXAtom-ORD&quot;><mo fence=&quot;false&quot; stretchy=&quot;false&quot;>{</mo><mi>a</mi><mo>,</mo><mi>b</mi><mo fence=&quot;false&quot; stretchy=&quot;false&quot;>}</mo></mrow></msub></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-22" style="width: 2.1em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.647em; height: 0px; font-size: 126%;"><span style="position: absolute; clip: rect(1.874em, 1001.65em, 2.837em, -999.997em); top: -2.378em; left: 0em;"><span class="mrow" id="MathJax-Span-23"><span class="msubsup" id="MathJax-Span-24"><span style="display: inline-block; position: relative; width: 1.647em; height: 0px;"><span style="position: absolute; clip: rect(3.858em, 1000em, 4.198em, -999.997em); top: -4.022em; left: 0em;"><span class="mi" id="MathJax-Span-25"></span><span style="display: inline-block; width: 0px; height: 4.028em;"></span></span><span style="position: absolute; top: -3.852em; left: 0em;"><span class="texatom" id="MathJax-Span-26"><span class="mrow" id="MathJax-Span-27"><span class="mo" id="MathJax-Span-28" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">{</span><span class="mi" id="MathJax-Span-29" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">a</span><span class="mo" id="MathJax-Span-30" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-31" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">b</span><span class="mo" id="MathJax-Span-32" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">}</span></span></span><span style="display: inline-block; width: 0px; height: 4.028em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.384em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.425em; border-left: 0px solid; width: 0px; height: 0.932em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi></mi><mrow class="MJX-TeXAtom-ORD"><mo fence="false" stretchy="false">{</mo><mi>a</mi><mo>,</mo><mi>b</mi><mo fence="false" stretchy="false">}</mo></mrow></msub></math></span></span><script type="math/tex" id="MathJax-Element-8">_{\{a,b\}}</script> Example</a></span><br><br>In this section, we consider a bigger example for the construction of a Büchi automaton from an S1S<span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-9-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><msub><mi></mi><mrow class=&quot;MJX-TeXAtom-ORD&quot;><mo fence=&quot;false&quot; stretchy=&quot;false&quot;>{</mo><mi>a</mi><mo>,</mo><mi>b</mi><mo fence=&quot;false&quot; stretchy=&quot;false&quot;>}</mo></mrow></msub></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-33" style="width: 2.019em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.616em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.846em, 1001.62em, 2.825em, -999.997em); top: -2.359em; left: 0em;"><span class="mrow" id="MathJax-Span-34"><span class="msubsup" id="MathJax-Span-35"><span style="display: inline-block; position: relative; width: 1.616em; height: 0px;"><span style="position: absolute; clip: rect(3.805em, 1000em, 4.15em, -999.997em); top: -3.972em; left: 0em;"><span class="mi" id="MathJax-Span-36"></span><span style="display: inline-block; width: 0px; height: 3.978em;"></span></span><span style="position: absolute; top: -3.799em; left: 0em;"><span class="texatom" id="MathJax-Span-37"><span class="mrow" id="MathJax-Span-38"><span class="mo" id="MathJax-Span-39" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">{</span><span class="mi" id="MathJax-Span-40" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">a</span><span class="mo" id="MathJax-Span-41" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-42" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">b</span><span class="mo" id="MathJax-Span-43" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">}</span></span></span><span style="display: inline-block; width: 0px; height: 3.978em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.365em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.425em; border-left: 0px solid; width: 0px; height: 0.932em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi></mi><mrow class="MJX-TeXAtom-ORD"><mo fence="false" stretchy="false">{</mo><mi>a</mi><mo>,</mo><mi>b</mi><mo fence="false" stretchy="false">}</mo></mrow></msub></math></span></span><script type="math/tex" id="MathJax-Element-9">_{\{a,b\}}</script> formula.<br><br><span class="ilc_text_inline_Strong"><a class="ilc_link_IntLink" href="./goto.php?target=file_1969750" target="_top" id="il__obj_1969750_2274315_16">8. The Complexity of the Complementation Construction</a></span><br><br>We analyse in this section, how big the complement automaton may grow depending on the size of the automaton to complement. That means: we calculate an upper bound for the worst-case growth of our construction. Note that not all details of the calculations are given (which I did on purpose).<br><br><span class="ilc_text_inline_Strong"><a class="ilc_link_IntLink" href="./goto.php?target=file_1969751" target="_top" id="il__obj_1969751_2274315_17">9. The Complexity of the Complementation Problem</a></span><span class="ilc_text_inline_Strong"> (<a class="ilc_link_IntLink" href="./goto.php?target=file_1986736" target="_top" id="il__obj_1986736_2274315_18">with annotations</a>)</span><br><br>We could ask ourselves whether or not we were simply too stupid to come up with an efficient algorithm for checking whether or not a given automaton is the complement of another given automaton (the so-called complemenation problem). Luckily, it seems as we were not stupid as most likely, the complementation problem for Büchi automata is a complex problem. It is PSPACE-complete.<br><br><span class="ilc_text_inline_Strong"><a class="ilc_link_IntLink" href="./goto.php?target=file_1993476" target="_top" id="il__obj_1993476_2274315_19">10. Other&nbsp;<span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-10-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>&amp;#x03C9;</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-44" style="width: 0.853em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.683em; height: 0px; font-size: 126%;"><span style="position: absolute; clip: rect(1.93em, 1000.63em, 2.724em, -999.997em); top: -2.548em; left: 0em;"><span class="mrow" id="MathJax-Span-45"><span class="mi" id="MathJax-Span-46" style="font-family: STIXGeneral-Italic;">ω</span></span><span style="display: inline-block; width: 0px; height: 2.554em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.068em; border-left: 0px solid; width: 0px; height: 0.718em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>ω</mi></math></span></span><script type="math/tex" id="MathJax-Element-10">\omega</script>-Automata</a> (<a class="ilc_link_IntLink" href="./goto.php?target=file_1997857" target="_top" id="il__obj_1997857_2274315_20">with annotations</a>)</span><br><br>There exist other types of automata on infinite words. We are going to discuss briefly Muller, Rabin, Streett, and Parity automata.<br><br><span class="ilc_text_inline_Strong"><a class="ilc_link_IntLink" href="./goto.php?target=file_2001588" target="_top" id="il__obj_2001588_2274315_21">11. NBW<span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-11-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mo stretchy=&quot;false&quot;>&amp;#x2192;</mo></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-47" style="width: 1.137em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.91em; height: 0px; font-size: 126%;"><span style="position: absolute; clip: rect(1.93em, 1000.85em, 2.667em, -999.997em); top: -2.548em; left: 0em;"><span class="mrow" id="MathJax-Span-48"><span class="mo" id="MathJax-Span-49" style="font-family: STIXGeneral-Regular;">→</span></span><span style="display: inline-block; width: 0px; height: 2.554em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: 0em; border-left: 0px solid; width: 0px; height: 0.646em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">→</mo></math></span></span><script type="math/tex" id="MathJax-Element-11">\rightarrow</script>DMW Sketch</a> (<a class="ilc_link_IntLink" href="./goto.php?target=file_2002446" target="_top" id="il__obj_2002446_2274315_22">with annotations</a>)</span><br><br>We will see (very briefly) a construction from an NBW to a DMW. We mainly discuss the construction using an example.<br><br><span class="ilc_text_inline_Strong"><a class="ilc_link_IntLink" href="./goto.php?target=file_2001589" target="_top" id="il__obj_2001589_2274315_23">12. Automata on Trees</a> (<a class="ilc_link_IntLink" href="./goto.php?target=file_2002447" target="_top" id="il__obj_2002447_2274315_24">with annotations</a>)</span><br><br>Again very briefly, we introduce automata operating on the complete infinite binary tree. We will consider two examples in which we are going to identify the difference between Büchi and Muller Tree automata.<!--Break--></div>
